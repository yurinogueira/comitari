version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - comitari-network
    env_file: ./config/.env

  redis:
    image: redis:7-alpine
    container_name: comitari-redis-container
    volumes:
      - redis-data:/data
    networks:
      - comitari-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: comitari-rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - comitari-network

  api:
    image: ngrtec/comitari:0.2.3
    container_name: comitari-api
    restart: "unless-stopped"
    stop_grace_period: "5s"
    environment:
      COMMAND: development
    volumes:
      - ./backend:/app
      - django-staticfiles:/app/staticfiles
      - django-pytest:/app/.pytest_cache
      - django-coverage:/app/.coverage
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - comitari-network
    env_file:
      - ./config/.env

  worker:
    image: ngrtec/comitari:0.2.3
    deploy:
      mode: replicated
      replicas: 2
    restart: "unless-stopped"
    stop_grace_period: "5s"
    environment:
      COMMAND: worker
    depends_on:
      - api
      - postgres
      - redis
    networks:
      - comitari-network
    env_file:
      - ./config/.env

  beat:
    image: ngrtec/comitari:0.2.3
    container_name: comitari-beat
    restart: "unless-stopped"
    stop_grace_period: "5s"
    environment:
      COMMAND: beat
    depends_on:
      - api
      - postgres
      - redis
      - rabbitmq
    networks:
      - comitari-network
    env_file:
      - ./config/.env

networks:
  comitari-network:

volumes:
  postgres-data:
  redis-data:
  django-staticfiles:
  django-pytest:
  django-coverage:
